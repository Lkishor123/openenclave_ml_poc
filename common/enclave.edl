// openenclave_ml_poc/common/enclave.edl
enclave {
    // Import necessary system OCalls for the SGX platform.
    // This includes OCalls like oe_sgx_get_cpuid_table_ocall.
    from "openenclave/edl/syscall.edl" import *;
    from "openenclave/edl/sgx/platform.edl" import *;
    // Import logging if your enclave uses OE logging features that make OCALLs
    from "openenclave/edl/logging.edl" import *;

    // Import memory if your enclave uses oe_malloc_ocall/oe_free_ocall directly
    // (usually not needed if using enclave's internal heap/allocators)
    from "openenclave/edl/memory.edl" import *;

    trusted {
        // ECALL to initialize the ML model inside the enclave
        public oe_result_t initialize_enclave_ml(
            [in, size=model_size] const unsigned char* model_data,
            size_t model_size);

        // ECALL to perform inference using the loaded model
        public oe_result_t enclave_infer(
            [in, size=input_data_byte_size] const float* input_data, // Assuming float input for ONNX
            size_t input_data_byte_size,
            [out, size=output_buffer_size_bytes] float* output_buffer, // Assuming float output
            size_t output_buffer_size_bytes,
            [out] size_t* actual_output_size_bytes); // To report actual size of output written

        // ECALL to terminate/cleanup ML resources in the enclave
        public oe_result_t terminate_enclave_ml();
    };

    untrusted {
        // Define any OCALLs your enclave needs to make to the host.
        // For example, if the host needs to perform complex ONNX operations
        // that are not feasible or secure to do entirely within the enclave's TCB.
        //
        // Example OCALL (if enclave delegates ONNX session creation to host):
        // oe_result_t ocall_host_onnx_create_session(
        //     [out] uint64_t* session_handle,
        //     [in, size=model_data_len] const unsigned char* model_data,
        //     size_t model_data_len);
        //
        // Example OCALL (if enclave delegates inference to host):
        // oe_result_t ocall_host_onnx_run_inference(
        //     uint64_t session_handle,
        //     [in, size=input_len] const void* input_data,
        //     size_t input_len,
        //     [out, size=output_buf_len] void* output_data,
        //     size_t output_buf_len,
        //     [out] size_t* actual_output_len);
    };
};
