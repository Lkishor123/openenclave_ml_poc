/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_ENCLAVE_ARGS_H
#define EDGER8R_ENCLAVE_ARGS_H

#include <openenclave/bits/result.h>

/**** User includes. ****/
#include "openenclave/bits/types.h"
#include "openenclave/bits/sgx/sgxtypes.h"
#include "openenclave/log.h"

/**** User defined types in EDL. ****/
#ifndef EDGER8R_STRUCT_FORMAT_IDS_T
#define EDGER8R_STRUCT_FORMAT_IDS_T
typedef struct format_ids_t
{
    void* data;
    size_t size;
} format_ids_t;
#endif

#ifndef EDGER8R_STRUCT_OE_REPORT_BUFFER_T
#define EDGER8R_STRUCT_OE_REPORT_BUFFER_T
typedef struct oe_report_buffer_t
{
    uint8_t* buffer;
    size_t size;
} oe_report_buffer_t;
#endif

#ifndef EDGER8R_STRUCT_OE_HOST_WORKER_CONTEXT_T
#define EDGER8R_STRUCT_OE_HOST_WORKER_CONTEXT_T
typedef struct oe_host_worker_context_t
{
    void* call_arg;
    oe_enclave_t* enc;
    int64_t is_stopping;
    int64_t event;
    uint64_t spin_count;
    uint64_t total_spin_count;
} oe_host_worker_context_t;
#endif

#ifndef EDGER8R_STRUCT_OE_ENCLAVE_WORKER_CONTEXT_T
#define EDGER8R_STRUCT_OE_ENCLAVE_WORKER_CONTEXT_T
typedef struct oe_enclave_worker_context_t
{
    void* call_arg;
    oe_enclave_t* enc;
    int64_t is_stopping;
    int64_t event;
    uint64_t spin_count;
    uint64_t spin_count_threshold;
    uint64_t total_spin_count;
} oe_enclave_worker_context_t;
#endif

#ifndef EDGER8R_STRUCT_TDX_QUOTE_COLLATERAL_T
#define EDGER8R_STRUCT_TDX_QUOTE_COLLATERAL_T
typedef struct tdx_quote_collateral_t
{
    uint8_t* data;
    uint32_t size;
} tdx_quote_collateral_t;
#endif

#endif // EDGER8R_ENCLAVE_ARGS_H
