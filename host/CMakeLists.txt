# host/CMakeLists.txt
cmake_minimum_required(VERSION 3.16)

set(HOST_APP_NAME ml_host_prod)
set(HOST_SOURCES
    host.cpp
    ${EDL_UNTRUSTED_C} # Generated by root CMakeLists.txt
)
set(HOST_HEADERS
    ${EDL_UNTRUSTED_H} # Generated by root CMakeLists.txt
)

add_executable(${HOST_APP_NAME} ${HOST_SOURCES} ${HOST_HEADERS})

# Link against Open Enclave host libraries (provides openenclave::host target)
target_link_libraries(${HOST_APP_NAME} PRIVATE openenclave::host)

# Link against ONNX Runtime (for the host application)
# GLOBAL_ONNXRUNTIME_INCLUDE_DIR and GLOBAL_ONNXRUNTIME_LIBRARY are set in root CMakeLists.txt
if(GLOBAL_ONNXRUNTIME_INCLUDE_DIR AND EXISTS "${GLOBAL_ONNXRUNTIME_INCLUDE_DIR}")
    target_include_directories(${HOST_APP_NAME} PRIVATE ${GLOBAL_ONNXRUNTIME_INCLUDE_DIR})
    message(STATUS "Host (${HOST_APP_NAME}): Added ONNX Runtime include directory: ${GLOBAL_ONNXRUNTIME_INCLUDE_DIR}")
else()
    message(WARNING "Host (${HOST_APP_NAME}): GLOBAL_ONNXRUNTIME_INCLUDE_DIR not set or invalid. Compilation might fail if ONNX headers are used by host directly.")
endif()

if(GLOBAL_ONNXRUNTIME_LIBRARY AND EXISTS "${GLOBAL_ONNXRUNTIME_LIBRARY}")
    target_link_libraries(${HOST_APP_NAME} PRIVATE ${GLOBAL_ONNXRUNTIME_LIBRARY})
    message(STATUS "Host (${HOST_APP_NAME}): Linking against ONNX Runtime library: ${GLOBAL_ONNXRUNTIME_LIBRARY}")
else()
    message(FATAL_ERROR "Host (${HOST_APP_NAME}): GLOBAL_ONNXRUNTIME_LIBRARY not set or invalid. Host linking will fail.")
endif()

# Link against C++ filesystem library (for std::filesystem in host.cpp)
# Modern C++ compilers usually link this automatically with C++17, but explicitly:
target_link_libraries(${HOST_APP_NAME} PRIVATE stdc++fs) # For GCC/Clang with C++17
# For MSVC, it's usually part of the standard library linking.

# Ensure EDL generation target (defined in root CMakeLists.txt) is a dependency for building this host app.
add_dependencies(${HOST_APP_NAME} GenerateEDL)

# --- Build Type Specific Settings for Host ---
# Example: Setting specific compiler flags for the host target
# target_compile_options(${HOST_APP_NAME} PRIVATE
#   $<$<CONFIG:Debug>:-Og -g3>
#   $<$<CONFIG:Release>:-O2 -DNDEBUG>
# )
# target_link_options(${HOST_APP_NAME} PRIVATE
#   $<$<CONFIG:Release>:-s> # Example: strip symbols for release
# )


# Output information
message(STATUS "Configuring Host Application: ${HOST_APP_NAME}")
message(STATUS "  Host sources: ${HOST_SOURCES}")
message(STATUS "  Host executable will be output as ${HOST_APP_NAME} in build/host/")

# Installation (optional)
# If you want to install the host executable and the signed enclave:
# install(TARGETS ${HOST_APP_NAME} DESTINATION bin)
# The enclave is built in ${CMAKE_BINARY_DIR}/enclave/${ENCLAVE_NAME}.signed.so
# You might need a custom install command to place it relative to the host app if needed.
# install(FILES ${CMAKE_BINARY_DIR}/enclave/${ENCLAVE_NAME}.signed.so DESTINATION lib/enclaves) # Example
