# ~/openenclave_ml_poc/helloworld/enclave/CMakeLists.txt

cmake_minimum_required(VERSION 3.16)

set(ENCLAVE_NAME helloworld_enclave)

# Create the executable target with source files that exist at configuration time.
add_executable(${ENCLAVE_NAME} enc.c)

# Add the generated trusted C file to the target's sources.
# The ${EDL_TRUSTED_C} variable is defined in the parent CMakeLists.txt.
# The GENERATED property set on this file in the parent scope is important.
target_sources(${ENCLAVE_NAME} PRIVATE ${EDL_TRUSTED_C})

# Link the enclave executable against the required Open Enclave libraries.
target_link_libraries(${ENCLAVE_NAME} PRIVATE openenclave::oeenclave openenclave::oelibc)

# Optional: Set the Open Enclave API version
# target_compile_definitions(${ENCLAVE_NAME} PRIVATE OE_API_VERSION=2)

# Ensure that the EDL generation target (GenerateEDL from root CMakeLists.txt)
# is completed before attempting to build this enclave.
add_dependencies(${ENCLAVE_NAME} GenerateEDL)

message(STATUS "Configuring Enclave (using add_executable and target_sources): ${ENCLAVE_NAME}")
message(STATUS "  Enclave base source: enc.c")
message(STATUS "  Enclave generated source: ${EDL_TRUSTED_C}")
message(STATUS "  Unsigned enclave executable: ${ENCLAVE_NAME}")

# --- Enclave Signing ---
set(ENCLAVE_CONF_FILE ${CMAKE_CURRENT_SOURCE_DIR}/helloworld.conf) # Must exist in helloworld/enclave/
set(ENCLAVE_PRIVATE_KEY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/private.pem) # Must exist in helloworld/enclave/

# Optional: Command to generate a demo private key if it doesn't exist.
find_package(OpenSSL)
if(OpenSSL_FOUND AND NOT EXISTS ${ENCLAVE_PRIVATE_KEY_FILE})
    # This command is only a placeholder for key generation.
    # It's better to ensure the key is present or use a more robust key generation script.
    add_custom_command(OUTPUT ${ENCLAVE_PRIVATE_KEY_FILE}
        COMMAND ${OpenSSL_EXECUTABLE} genrsa -out ${ENCLAVE_PRIVATE_KEY_FILE} -3 3072
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT "Generating self-signed key pair (private.pem) for enclave signing (DEMO ONLY, if key not present)"
        VERBATIM)
    # To make this part of the build if the key is missing, you might need a custom target
    # that depends on this output, and then make the signing command depend on that target.
    # For simplicity, this example assumes private.pem will exist or be generated by this one-off command if missing.
    message(STATUS "Attempting to generate demo key: ${ENCLAVE_PRIVATE_KEY_FILE} (if it does not exist)")
    # add_custom_target(GenerateEnclaveKeyIfNeeded DEPENDS ${ENCLAVE_PRIVATE_KEY_FILE})
    # add_dependencies(${ENCLAVE_NAME} GenerateEnclaveKeyIfNeeded) # Not ideal for build flow
else()
    if(NOT OpenSSL_FOUND)
        message(WARNING "OpenSSL not found. Cannot generate demo private key. Ensure ${ENCLAVE_PRIVATE_KEY_FILE} exists.")
    endif()
    if(EXISTS ${ENCLAVE_PRIVATE_KEY_FILE})
         message(STATUS "Using existing private key: ${ENCLAVE_PRIVATE_KEY_FILE}")
    else()
         message(WARNING "Private key ${ENCLAVE_PRIVATE_KEY_FILE} not found and OpenSSL not available to generate it.")
    endif()
endif()

set(SIGNED_ENCLAVE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${ENCLAVE_NAME}.signed.so)

add_custom_command(OUTPUT ${SIGNED_ENCLAVE_FILE}
    DEPENDS
        ${ENCLAVE_NAME}                 # Depends on the unsigned enclave executable
        ${ENCLAVE_CONF_FILE}            # Depends on the enclave configuration file
        ${ENCLAVE_PRIVATE_KEY_FILE}     # Depends on the private key
    COMMAND openenclave::oesign sign
            -e $<TARGET_FILE:${ENCLAVE_NAME}>
            -c ${ENCLAVE_CONF_FILE}
            -k ${ENCLAVE_PRIVATE_KEY_FILE}
    COMMENT "Signing enclave ${ENCLAVE_NAME} -> ${SIGNED_ENCLAVE_FILE}"
    VERBATIM)

add_custom_target(${ENCLAVE_NAME}_signed ALL
    DEPENDS ${SIGNED_ENCLAVE_FILE})

message(STATUS "  Signed enclave will be: ${SIGNED_ENCLAVE_FILE}")
message(STATUS "  Ensure ${ENCLAVE_CONF_FILE} and ${ENCLAVE_PRIVATE_KEY_FILE} exist for signing.")
