# ~/openenclave_ml_poc/helloworld/enclave/CMakeLists.txt

cmake_minimum_required(VERSION 3.16)

# Define the name for your enclave executable (unsigned)
set(ENCLAVE_NAME helloworld_enclave)

# List the source files for the enclave.
set(ENCLAVE_SOURCES
    enc.c
    ${EDL_TRUSTED_C} # Generated by root CMakeLists.txt, path is available
)
# The trusted header (e.g., helloworld_t.h) will be included by enc.c from the
# EDL_GENERATED_DIR which was added to include_directories in the root CMakeLists.txt.

# Create the unsigned enclave executable
add_executable(${ENCLAVE_NAME} ${ENCLAVE_SOURCES})

# Link the enclave executable against the required Open Enclave libraries.
target_link_libraries(${ENCLAVE_NAME} PRIVATE openenclave::oeenclave openenclave::oelibc)

# Optional: Set the Open Enclave API version
# target_compile_definitions(${ENCLAVE_NAME} PRIVATE OE_API_VERSION=2)

# Ensure that EDL generation is completed before attempting to build this enclave.
add_dependencies(${ENCLAVE_NAME} GenerateEDL)

message(STATUS "Configuring Enclave (using add_executable): ${ENCLAVE_NAME}")
message(STATUS "  Enclave sources: ${ENCLAVE_SOURCES}")
message(STATUS "  Unsigned enclave executable: ${ENCLAVE_NAME}")

# --- Enclave Signing ---
set(ENCLAVE_CONF_FILE ${CMAKE_CURRENT_SOURCE_DIR}/helloworld.conf)
set(ENCLAVE_PRIVATE_KEY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/private.pem)

find_package(OpenSSL)
if(OpenSSL_FOUND)
    add_custom_command(OUTPUT ${ENCLAVE_PRIVATE_KEY_FILE}
        COMMAND ${OpenSSL_EXECUTABLE} genrsa -out ${ENCLAVE_PRIVATE_KEY_FILE} -3 3072
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT "Generating self-signed key pair (private.pem) for enclave signing (DEMO ONLY if key not present)"
        VERBATIM)
else()
    message(WARNING "OpenSSL not found. Cannot generate demo private key. Ensure ${ENCLAVE_PRIVATE_KEY_FILE} exists.")
endif()

set(SIGNED_ENCLAVE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${ENCLAVE_NAME}.signed.so)

add_custom_command(OUTPUT ${SIGNED_ENCLAVE_FILE}
    DEPENDS
        ${ENCLAVE_NAME}
        ${ENCLAVE_CONF_FILE}
        ${ENCLAVE_PRIVATE_KEY_FILE}
    COMMAND openenclave::oesign sign
            -e $<TARGET_FILE:${ENCLAVE_NAME}>
            -c ${ENCLAVE_CONF_FILE}
            -k ${ENCLAVE_PRIVATE_KEY_FILE}
    COMMENT "Signing enclave ${ENCLAVE_NAME} -> ${SIGNED_ENCLAVE_FILE}"
    VERBATIM)

add_custom_target(${ENCLAVE_NAME}_signed ALL
    DEPENDS ${SIGNED_ENCLAVE_FILE})

message(STATUS "  Signed enclave will be: ${SIGNED_ENCLAVE_FILE}")
message(STATUS "  Ensure ${ENCLAVE_CONF_FILE} and ${ENCLAVE_PRIVATE_KEY_FILE} exist for signing.")
